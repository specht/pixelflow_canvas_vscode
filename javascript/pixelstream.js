const vga_palette = [
    0x00,0x00,0x00,0x00,0x00,0xaa,0x00,0xaa,0x00,0x00,0xaa,0xaa,0xaa,0x00,0x00,0xaa,
    0x00,0xaa,0xaa,0x55,0x00,0xaa,0xaa,0xaa,0x55,0x55,0x55,0x55,0x55,0xff,0x55,0xff,
    0x55,0x55,0xff,0xff,0xff,0x55,0x55,0xff,0x55,0xff,0xff,0xff,0x55,0xff,0xff,0xff,
    0x00,0x00,0x00,0x14,0x14,0x14,0x20,0x20,0x20,0x2c,0x2c,0x2c,0x38,0x38,0x38,0x45,
    0x45,0x45,0x51,0x51,0x51,0x61,0x61,0x61,0x71,0x71,0x71,0x82,0x82,0x82,0x92,0x92,
    0x92,0xa2,0xa2,0xa2,0xb6,0xb6,0xb6,0xcb,0xcb,0xcb,0xe3,0xe3,0xe3,0xff,0xff,0xff,
    0x00,0x00,0xff,0x41,0x00,0xff,0x7d,0x00,0xff,0xbe,0x00,0xff,0xff,0x00,0xff,0xff,
    0x00,0xbe,0xff,0x00,0x7d,0xff,0x00,0x41,0xff,0x00,0x00,0xff,0x41,0x00,0xff,0x7d,
    0x00,0xff,0xbe,0x00,0xff,0xff,0x00,0xbe,0xff,0x00,0x7d,0xff,0x00,0x41,0xff,0x00,
    0x00,0xff,0x00,0x00,0xff,0x41,0x00,0xff,0x7d,0x00,0xff,0xbe,0x00,0xff,0xff,0x00,
    0xbe,0xff,0x00,0x7d,0xff,0x00,0x41,0xff,0x7d,0x7d,0xff,0x9e,0x7d,0xff,0xbe,0x7d,
    0xff,0xdf,0x7d,0xff,0xff,0x7d,0xff,0xff,0x7d,0xdf,0xff,0x7d,0xbe,0xff,0x7d,0x9e,
    0xff,0x7d,0x7d,0xff,0x9e,0x7d,0xff,0xbe,0x7d,0xff,0xdf,0x7d,0xff,0xff,0x7d,0xdf,
    0xff,0x7d,0xbe,0xff,0x7d,0x9e,0xff,0x7d,0x7d,0xff,0x7d,0x7d,0xff,0x9e,0x7d,0xff,
    0xbe,0x7d,0xff,0xdf,0x7d,0xff,0xff,0x7d,0xdf,0xff,0x7d,0xbe,0xff,0x7d,0x9e,0xff,
    0xb6,0xb6,0xff,0xc7,0xb6,0xff,0xdb,0xb6,0xff,0xeb,0xb6,0xff,0xff,0xb6,0xff,0xff,
    0xb6,0xeb,0xff,0xb6,0xdb,0xff,0xb6,0xc7,0xff,0xb6,0xb6,0xff,0xc7,0xb6,0xff,0xdb,
    0xb6,0xff,0xeb,0xb6,0xff,0xff,0xb6,0xeb,0xff,0xb6,0xdb,0xff,0xb6,0xc7,0xff,0xb6,
    0xb6,0xff,0xb6,0xb6,0xff,0xc7,0xb6,0xff,0xdb,0xb6,0xff,0xeb,0xb6,0xff,0xff,0xb6,
    0xeb,0xff,0xb6,0xdb,0xff,0xb6,0xc7,0xff,0x00,0x00,0x71,0x1c,0x00,0x71,0x38,0x00,
    0x71,0x55,0x00,0x71,0x71,0x00,0x71,0x71,0x00,0x55,0x71,0x00,0x38,0x71,0x00,0x1c,
    0x71,0x00,0x00,0x71,0x1c,0x00,0x71,0x38,0x00,0x71,0x55,0x00,0x71,0x71,0x00,0x55,
    0x71,0x00,0x38,0x71,0x00,0x1c,0x71,0x00,0x00,0x71,0x00,0x00,0x71,0x1c,0x00,0x71,
    0x38,0x00,0x71,0x55,0x00,0x71,0x71,0x00,0x55,0x71,0x00,0x38,0x71,0x00,0x1c,0x71,
    0x38,0x38,0x71,0x45,0x38,0x71,0x55,0x38,0x71,0x61,0x38,0x71,0x71,0x38,0x71,0x71,
    0x38,0x61,0x71,0x38,0x55,0x71,0x38,0x45,0x71,0x38,0x38,0x71,0x45,0x38,0x71,0x55,
    0x38,0x71,0x61,0x38,0x71,0x71,0x38,0x61,0x71,0x38,0x55,0x71,0x38,0x45,0x71,0x38,
    0x38,0x71,0x38,0x38,0x71,0x45,0x38,0x71,0x55,0x38,0x71,0x61,0x38,0x71,0x71,0x38,
    0x61,0x71,0x38,0x55,0x71,0x38,0x45,0x71,0x51,0x51,0x71,0x59,0x51,0x71,0x61,0x51,
    0x71,0x69,0x51,0x71,0x71,0x51,0x71,0x71,0x51,0x69,0x71,0x51,0x61,0x71,0x51,0x59,
    0x71,0x51,0x51,0x71,0x59,0x51,0x71,0x61,0x51,0x71,0x69,0x51,0x71,0x71,0x51,0x69,
    0x71,0x51,0x61,0x71,0x51,0x59,0x71,0x51,0x51,0x71,0x51,0x51,0x71,0x59,0x51,0x71,
    0x61,0x51,0x71,0x69,0x51,0x71,0x71,0x51,0x69,0x71,0x51,0x61,0x71,0x51,0x59,0x71,
    0x00,0x00,0x41,0x10,0x00,0x41,0x20,0x00,0x41,0x30,0x00,0x41,0x41,0x00,0x41,0x41,
    0x00,0x30,0x41,0x00,0x20,0x41,0x00,0x10,0x41,0x00,0x00,0x41,0x10,0x00,0x41,0x20,
    0x00,0x41,0x30,0x00,0x41,0x41,0x00,0x30,0x41,0x00,0x20,0x41,0x00,0x10,0x41,0x00,
    0x00,0x41,0x00,0x00,0x41,0x10,0x00,0x41,0x20,0x00,0x41,0x30,0x00,0x41,0x41,0x00,
    0x30,0x41,0x00,0x20,0x41,0x00,0x10,0x41,0x20,0x20,0x41,0x28,0x20,0x41,0x30,0x20,
    0x41,0x38,0x20,0x41,0x41,0x20,0x41,0x41,0x20,0x38,0x41,0x20,0x30,0x41,0x20,0x28,
    0x41,0x20,0x20,0x41,0x28,0x20,0x41,0x30,0x20,0x41,0x38,0x20,0x41,0x41,0x20,0x38,
    0x41,0x20,0x30,0x41,0x20,0x28,0x41,0x20,0x20,0x41,0x20,0x20,0x41,0x28,0x20,0x41,
    0x30,0x20,0x41,0x38,0x20,0x41,0x41,0x20,0x38,0x41,0x20,0x30,0x41,0x20,0x28,0x41,
    0x2c,0x2c,0x41,0x30,0x2c,0x41,0x34,0x2c,0x41,0x3c,0x2c,0x41,0x41,0x2c,0x41,0x41,
    0x2c,0x3c,0x41,0x2c,0x34,0x41,0x2c,0x30,0x41,0x2c,0x2c,0x41,0x30,0x2c,0x41,0x34,
    0x2c,0x41,0x3c,0x2c,0x41,0x41,0x2c,0x3c,0x41,0x2c,0x34,0x41,0x2c,0x30,0x41,0x2c,
    0x2c,0x41,0x2c,0x2c,0x41,0x30,0x2c,0x41,0x34,0x2c,0x41,0x3c,0x2c,0x41,0x41,0x2c,
    0x3c,0x41,0x2c,0x34,0x41,0x2c,0x30,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
];
const key_code = {
    'Backquote': 0,
    'Digit1': 1,
    'Digit2': 2,
    'Digit3': 3,
    'Digit4': 4,
    'Digit5': 5,
    'Digit6': 6,
    'Digit7': 7,
    'Digit8': 8,
    'Digit9': 9,
    'Digit0': 10,
    'Minus': 11,
    'Equal': 12,
    'Backspace': 13,

    'KeyQ': 14,
    'KeyW': 15,
    'KeyE': 16,
    'KeyR': 17,
    'KeyT': 18,
    'KeyY': 19,
    'KeyU': 20,
    'KeyI': 21,
    'KeyO': 22,
    'KeyP': 23,
    'BracketLeft': 24,
    'BracketRight': 25,

    'KeyA': 26,
    'KeyS': 27,
    'KeyD': 28,
    'KeyF': 29,
    'KeyG': 30,
    'KeyH': 31,
    'KeyJ': 32,
    'KeyK': 33,
    'KeyL': 34,
    'Semicolon': 35,
    'Quote': 36,
    'Backslash': 37,
    'Enter': 38,

    'IntlBackslash': 39,
    'KeyZ': 40,
    'KeyX': 41,
    'KeyC': 42,
    'KeyV': 43,
    'KeyB': 44,
    'KeyN': 45,
    'KeyM': 46,
    'Comma': 47,
    'Period': 48,
    'Slash': 49,

    'Space': 50,
    'ArrowLeft': 51,
    'ArrowUp': 52,
    'ArrowDown': 53,
    'ArrowRight': 54,

    'Escape': 55,

    'ShiftLeft': 56,
    'ShiftRight': 57,
    'ControlLeft': 58,
    'ControlRight': 59,
    'AltLeft': 60,
    'AltRight': 61,

    'Insert': 62,
    'Delete': 63,
    'Home': 64,
    'End': 65,
    'PageUp': 66,
    'PageDown': 67,

    'NumpadDivide': 68,
    'NumpadMultiply': 69,
    'NumpadSubtract': 70,
    'NumpadAdd': 71,
    'NumpadEnter': 72,
    'NumpadDecimal': 73,
    'Numpad0': 74,
    'Numpad1': 75,
    'Numpad2': 76,
    'Numpad3': 77,
    'Numpad4': 78,
    'Numpad5': 79,
    'Numpad6': 80,
    'Numpad7': 81,
    'Numpad8': 82,
    'Numpad9': 83,
};

var palette = [...vga_palette];
const canvas = document.getElementById('pixelstream_canvas');
var crt_width = canvas.width;
var crt_height = canvas.height;
var ctx = canvas.getContext("2d", { alpha: false, willReadFrequently: true });
var data = ctx.getImageData(0, 0, canvas.width, canvas.height);
var pixels = data.data;
ctx.fillStyle = '#000000';
ctx.fillRect(0, 0, crt_width, crt_height);
var framebuffer = new Uint8Array(crt_width * crt_height * 3);
var color_mode = 0;
var x = 0;
var y = 0;
var collect_events = false;

const vscode = acquireVsCodeApi();

function vertical_refresh() {
    let t = 0;
    if (color_mode === 0) {
        for (let i = 0; i < crt_width * crt_height * 3; i++) {
            pixels[t] = framebuffer[i];
            t += 1;
            if (i % 3 === 2) { t += 1; }
        }
    } else {
        for (let i = 0; i < crt_width * crt_height; i++) {
            let c = framebuffer[i];
            pixels[t++] = palette[c * 3 + 0];
            pixels[t++] = palette[c * 3 + 1];
            pixels[t++] = palette[c * 3 + 2];
            t++;
        }
    }
    ctx.putImageData(data, 0, 0);
    requestAnimationFrame(vertical_refresh);
}

requestAnimationFrame(vertical_refresh);

function set_size(width, height) {
    canvas.width = width;
    canvas.height = height;
    crt_width = width;
    crt_height = height;
    ctx = canvas.getContext("2d", { alpha: false, willReadFrequently: true });
    data = ctx.getImageData(0, 0, width, height);
    pixels = data.data;
}

function set_color_mode(mode) {
    color_mode = mode;
    framebuffer = new Uint8Array(crt_width * crt_height * (color_mode === 0 ? 3 : 1));
    if (color_mode === 1) {
        palette = [...vga_palette];
    }
}

function set_interpolation_mode(mode) {
    if (mode === 0) {
        canvas.style['image-rendering'] = 'pixelated';
    } else {
        canvas.style.removeProperty('image-rendering');
    }
}

window.addEventListener('keydown', event => {
    if (!collect_events) return;
    let code = key_code[event.code];
    if (code !== undefined) {
        vscode.postMessage([1, code]);
    }
});
window.addEventListener('keyup', event => {
    if (!collect_events) return;
    let code = key_code[event.code];
    if (code !== undefined) {
        vscode.postMessage([2, code]);
    }
});

function transform(x, y) {
    if (crt_width * canvas.clientHeight > crt_height * canvas.clientWidth) {
        // fit width
        y -= (canvas.clientHeight - crt_height * canvas.clientWidth / crt_width) / 2;
        x /= canvas.clientWidth;
        y /= canvas.clientWidth / (crt_width / crt_height);
    } else {
        // fit height
        x -= (canvas.clientWidth - crt_width * canvas.clientHeight / crt_height) / 2;
        y /= canvas.clientHeight;
        x /= canvas.clientHeight / (crt_height / crt_width);
    }
    x = Math.round(x * crt_width - 0.5);
    y = Math.round(y * crt_height - 0.5);
    return [x, y];
}

var old_x = -1;
var old_y = -1;

window.addEventListener('mousemove', event => {
    if (!collect_events) return;
    // center crt_width / crt_height
    // within canvas.clientWidth / canvas.clientHeight
    let x = event.offsetX;
    let y = event.offsetY;
    [x, y] = transform(x, y);
    if (x !== old_x || y !== old_y) {
        vscode.postMessage([3, x, y]);
        old_x = x;
        old_y = y;
    }
});
window.addEventListener('mousedown', event => {
    if (!collect_events) return;
    let button = event.button;
    let x = event.offsetX;
    let y = event.offsetY;
    [x, y] = transform(x, y);
    vscode.postMessage([4, button, x, y]);
});

window.addEventListener('mouseup', event => {
    if (!collect_events) return;
    let button = event.button;
    let x = event.offsetX;
    let y = event.offsetY;
    [x, y] = transform(x, y);
    vscode.postMessage([5, button, x, y]);
});

window.addEventListener('message', event => {
    const messages = event.data;
    for (let message of messages) {
        if (message.command === 'reset') {
            x = 0;
            y = 0;
            palette = [...vga_palette];
            set_size(320, 180);
            set_color_mode(0);
            set_interpolation_mode(0);
            collect_events = false;
        } else if (message.command === 'set_size') {
            set_size(message.width, message.height);
        } else if (message.command === 'set_color_mode') {
            set_color_mode(message.mode);
        } else if (message.command === 'set_interpolation_mode') {
            set_interpolation_mode(message.mode);
        } else if (message.command === 'set_palette') {
            palette[message.i * 3 + 0] = message.r;
            palette[message.i * 3 + 1] = message.g;
            palette[message.i * 3 + 2] = message.b;
        } else if (message.command === 'move_to') {
            x = message.x;
            y = message.y;
        } else if (message.command === 'set_pixel') {
            let color = message.color;
            let offset = y * crt_width + x;
            if (color_mode === 0) { offset *= 3; }
            if (color_mode === 0) {
                framebuffer[offset++] = color[0] & 0xff;
                framebuffer[offset++] = color[1] & 0xff;
                framebuffer[offset++] = color[2] & 0xff;
            } else {
                framebuffer[offset++] = color[0] & 0xff;
            }
            x += 1;
            if (x >= crt_width) {
                x = 0;
                y = (y + 1) % crt_height;
            }
        } else if (message.command === 'set_buffer') {
            let max = crt_width * crt_height * (color_mode === 0 ? 3 : 1);
            for (let i = 0; i < max; i++) {
                framebuffer[i] = message.buffer[i];
            }
        } else if (message.command === 'collect_events') {
            collect_events = true;
        }
    }
});

